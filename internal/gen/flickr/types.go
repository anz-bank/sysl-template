// Code generated by sysl DO NOT EDIT.
package flickr

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/anz-bank/sysl-go/validator"
	"github.com/rickb777/date"
)

// Reference imports to suppress unused errors
var _ = time.Parse

// Reference imports to suppress unused errors
var _ = date.Parse

// Note ...
type Note struct {
	Description *string `json:"description,omitempty"`
}

func (t *Note) UnmarshalJSON(data []byte) error {
	inner := struct {
		Description *string `json:"Description,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Note{
		Description: inner.Description,
	}
	return nil
}

// Owner ...
type Owner struct {
	Iconfarm      *string `json:"iconfarm,omitempty"`
	Iconserver    *string `json:"iconserver,omitempty"`
	Is_ad_free    *bool   `json:"is_ad_free,omitempty"`
	Ispro         *bool   `json:"ispro,omitempty"`
	Location      *string `json:"location,omitempty"`
	Noindexfollow *bool   `json:"noindexfollow,omitempty"`
	Nsid          *string `json:"nsid,omitempty"`
	Path_alias    *string `json:"path_alias,omitempty"`
	Realname      *string `json:"realname,omitempty"`
	Username      *string `json:"username,omitempty"`
}

func (t *Owner) UnmarshalJSON(data []byte) error {
	inner := struct {
		Iconfarm      *string `json:"Iconfarm,omitempty"`
		Iconserver    *string `json:"Iconserver,omitempty"`
		Is_ad_free    *bool   `json:"Is_ad_free,omitempty"`
		Ispro         *bool   `json:"Ispro,omitempty"`
		Location      *string `json:"Location,omitempty"`
		Noindexfollow *bool   `json:"Noindexfollow,omitempty"`
		Nsid          *string `json:"Nsid,omitempty"`
		Path_alias    *string `json:"Path_alias,omitempty"`
		Realname      *string `json:"Realname,omitempty"`
		Username      *string `json:"Username,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Owner{
		Iconfarm:      inner.Iconfarm,
		Iconserver:    inner.Iconserver,
		Is_ad_free:    inner.Is_ad_free,
		Ispro:         inner.Ispro,
		Location:      inner.Location,
		Noindexfollow: inner.Noindexfollow,
		Nsid:          inner.Nsid,
		Path_alias:    inner.Path_alias,
		Realname:      inner.Realname,
		Username:      inner.Username,
	}
	return nil
}

// Photo ...
type Photo struct {
	Comments          *Photo_comments          `json:"comments,omitempty"`
	Dates             *Photo_dates             `json:"dates,omitempty"`
	Dateuploaded      *string                  `json:"dateuploaded,omitempty"`
	Description       *Photo_description       `json:"description,omitempty"`
	Editability       *Photo_editability       `json:"editability,omitempty"`
	Farm              *string                  `json:"farm,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	Isfavorite        *bool                    `json:"isfavorite,omitempty"`
	License           *string                  `json:"license,omitempty"`
	Media             *string                  `json:"media,omitempty"`
	Notes             *Photo_notes             `json:"notes,omitempty"`
	Originalsecret    *string                  `json:"originalsecret,omitempty"`
	Owner             *Owner                   `json:"owner,omitempty"`
	People            *Photo_people            `json:"people,omitempty"`
	Permissions       *Photo_permissions       `json:"permissions,omitempty"`
	Publiceditability *Photo_publiceditability `json:"publiceditability,omitempty"`
	Rotation          *string                  `json:"rotation,omitempty"`
	Safe              *bool                    `json:"safe,omitempty"`
	Safety_level      *string                  `json:"safety_level,omitempty"`
	Secret            *string                  `json:"secret,omitempty"`
	Server            *string                  `json:"server,omitempty"`
	Tags              *Photo_tags              `json:"tags,omitempty"`
	Title             *Photo_title             `json:"title,omitempty"`
	Urls              *Photo_urls              `json:"urls,omitempty"`
	Usage             *Photo_usage             `json:"usage,omitempty"`
	Views             *string                  `json:"views,omitempty"`
	Visibility        *Photo_visibility        `json:"visibility,omitempty"`
}

func (t *Photo) UnmarshalJSON(data []byte) error {
	inner := struct {
		Comments          *Photo_comments          `json:"Comments,omitempty"`
		Dates             *Photo_dates             `json:"Dates,omitempty"`
		Dateuploaded      *string                  `json:"Dateuploaded,omitempty"`
		Description       *Photo_description       `json:"Description,omitempty"`
		Editability       *Photo_editability       `json:"Editability,omitempty"`
		Farm              *string                  `json:"Farm,omitempty"`
		ID                *string                  `json:"ID,omitempty"`
		Isfavorite        *bool                    `json:"Isfavorite,omitempty"`
		License           *string                  `json:"License,omitempty"`
		Media             *string                  `json:"Media,omitempty"`
		Notes             *Photo_notes             `json:"Notes,omitempty"`
		Originalsecret    *string                  `json:"Originalsecret,omitempty"`
		Owner             *Owner                   `json:"Owner,omitempty"`
		People            *Photo_people            `json:"People,omitempty"`
		Permissions       *Photo_permissions       `json:"Permissions,omitempty"`
		Publiceditability *Photo_publiceditability `json:"Publiceditability,omitempty"`
		Rotation          *string                  `json:"Rotation,omitempty"`
		Safe              *bool                    `json:"Safe,omitempty"`
		Safety_level      *string                  `json:"Safety_level,omitempty"`
		Secret            *string                  `json:"Secret,omitempty"`
		Server            *string                  `json:"Server,omitempty"`
		Tags              *Photo_tags              `json:"Tags,omitempty"`
		Title             *Photo_title             `json:"Title,omitempty"`
		Urls              *Photo_urls              `json:"Urls,omitempty"`
		Usage             *Photo_usage             `json:"Usage,omitempty"`
		Views             *string                  `json:"Views,omitempty"`
		Visibility        *Photo_visibility        `json:"Visibility,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo{
		Comments:          inner.Comments,
		Dates:             inner.Dates,
		Dateuploaded:      inner.Dateuploaded,
		Description:       inner.Description,
		Editability:       inner.Editability,
		Farm:              inner.Farm,
		ID:                inner.ID,
		Isfavorite:        inner.Isfavorite,
		License:           inner.License,
		Media:             inner.Media,
		Notes:             inner.Notes,
		Originalsecret:    inner.Originalsecret,
		Owner:             inner.Owner,
		People:            inner.People,
		Permissions:       inner.Permissions,
		Publiceditability: inner.Publiceditability,
		Rotation:          inner.Rotation,
		Safe:              inner.Safe,
		Safety_level:      inner.Safety_level,
		Secret:            inner.Secret,
		Server:            inner.Server,
		Tags:              inner.Tags,
		Title:             inner.Title,
		Urls:              inner.Urls,
		Usage:             inner.Usage,
		Views:             inner.Views,
		Visibility:        inner.Visibility,
	}
	return nil
}

// PhotoResource ...
type PhotoResource struct {
	Page    *float64 `json:"page,omitempty"`
	Pages   *float64 `json:"pages,omitempty"`
	Perpage *float64 `json:"perpage,omitempty"`
	Photos  []Photo  `json:"photos,omitempty"`
	Total   *float64 `json:"total,omitempty"`
}

func (t *PhotoResource) UnmarshalJSON(data []byte) error {
	inner := struct {
		Page    *float64 `json:"Page,omitempty"`
		Pages   *float64 `json:"Pages,omitempty"`
		Perpage *float64 `json:"Perpage,omitempty"`
		Total   *float64 `json:"Total,omitempty"`
		Photos  *[]Photo `json:"Photos,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}
	if inner.Photos == nil {
		return errors.New("Photos cannot be nil")
	}

	*t = PhotoResource{
		Page:    inner.Page,
		Pages:   inner.Pages,
		Perpage: inner.Perpage,
		Total:   inner.Total,
		Photos:  *inner.Photos,
	}
	return nil
}

// Photo_comments ...
type Photo_comments struct {
	_content *string `json:"_content,omitempty"`
}

func (t *Photo_comments) UnmarshalJSON(data []byte) error {
	inner := struct {
		_content *string `json:"_content,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_comments{
		_content: inner._content,
	}
	return nil
}

// Photo_dates ...
type Photo_dates struct {
	Lastupdate       *string `json:"lastupdate,omitempty"`
	Posted           *string `json:"posted,omitempty"`
	Taken            *string `json:"taken,omitempty"`
	Takengranularity *string `json:"takengranularity,omitempty"`
	Takenunknown     *bool   `json:"takenunknown,omitempty"`
}

func (t *Photo_dates) UnmarshalJSON(data []byte) error {
	inner := struct {
		Lastupdate       *string `json:"Lastupdate,omitempty"`
		Posted           *string `json:"Posted,omitempty"`
		Taken            *string `json:"Taken,omitempty"`
		Takengranularity *string `json:"Takengranularity,omitempty"`
		Takenunknown     *bool   `json:"Takenunknown,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_dates{
		Lastupdate:       inner.Lastupdate,
		Posted:           inner.Posted,
		Taken:            inner.Taken,
		Takengranularity: inner.Takengranularity,
		Takenunknown:     inner.Takenunknown,
	}
	return nil
}

// Photo_description ...
type Photo_description struct {
	_content *string `json:"_content,omitempty"`
}

func (t *Photo_description) UnmarshalJSON(data []byte) error {
	inner := struct {
		_content *string `json:"_content,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_description{
		_content: inner._content,
	}
	return nil
}

// Photo_editability ...
type Photo_editability struct {
	Canaddmeta *bool `json:"canaddmeta,omitempty"`
	Cancomment *bool `json:"cancomment,omitempty"`
}

func (t *Photo_editability) UnmarshalJSON(data []byte) error {
	inner := struct {
		Canaddmeta *bool `json:"Canaddmeta,omitempty"`
		Cancomment *bool `json:"Cancomment,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_editability{
		Canaddmeta: inner.Canaddmeta,
		Cancomment: inner.Cancomment,
	}
	return nil
}

// Photo_notes ...
type Photo_notes struct {
	Note []Note `json:"note,omitempty"`
}

// Photo_people ...
type Photo_people struct {
	Haspeople *bool `json:"haspeople,omitempty"`
}

func (t *Photo_people) UnmarshalJSON(data []byte) error {
	inner := struct {
		Haspeople *bool `json:"Haspeople,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_people{
		Haspeople: inner.Haspeople,
	}
	return nil
}

// Photo_permissions ...
type Photo_permissions struct {
	Permaddmeta *string `json:"permaddmeta,omitempty"`
	Permcomment *string `json:"permcomment,omitempty"`
}

func (t *Photo_permissions) UnmarshalJSON(data []byte) error {
	inner := struct {
		Permaddmeta *string `json:"Permaddmeta,omitempty"`
		Permcomment *string `json:"Permcomment,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_permissions{
		Permaddmeta: inner.Permaddmeta,
		Permcomment: inner.Permcomment,
	}
	return nil
}

// Photo_publiceditability ...
type Photo_publiceditability struct {
	Canaddmeta *bool `json:"canaddmeta,omitempty"`
	Cancomment *bool `json:"cancomment,omitempty"`
}

func (t *Photo_publiceditability) UnmarshalJSON(data []byte) error {
	inner := struct {
		Canaddmeta *bool `json:"Canaddmeta,omitempty"`
		Cancomment *bool `json:"Cancomment,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_publiceditability{
		Canaddmeta: inner.Canaddmeta,
		Cancomment: inner.Cancomment,
	}
	return nil
}

// Photo_tags ...
type Photo_tags struct {
	Tag []Tag `json:"tag,omitempty"`
}

// Photo_title ...
type Photo_title struct {
	_content *string `json:"_content,omitempty"`
}

func (t *Photo_title) UnmarshalJSON(data []byte) error {
	inner := struct {
		_content *string `json:"_content,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_title{
		_content: inner._content,
	}
	return nil
}

// Photo_urls ...
type Photo_urls struct {
	URL []URL `json:"url,omitempty"`
}

// Photo_usage ...
type Photo_usage struct {
	Canblog     *bool `json:"canblog,omitempty"`
	Candownload *bool `json:"candownload,omitempty"`
	Canprint    *bool `json:"canprint,omitempty"`
	Canshare    *bool `json:"canshare,omitempty"`
}

func (t *Photo_usage) UnmarshalJSON(data []byte) error {
	inner := struct {
		Canblog     *bool `json:"Canblog,omitempty"`
		Candownload *bool `json:"Candownload,omitempty"`
		Canprint    *bool `json:"Canprint,omitempty"`
		Canshare    *bool `json:"Canshare,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_usage{
		Canblog:     inner.Canblog,
		Candownload: inner.Candownload,
		Canprint:    inner.Canprint,
		Canshare:    inner.Canshare,
	}
	return nil
}

// Photo_visibility ...
type Photo_visibility struct {
	Isfamily *bool `json:"isfamily,omitempty"`
	Isfriend *bool `json:"isfriend,omitempty"`
	Ispublic *bool `json:"ispublic,omitempty"`
}

func (t *Photo_visibility) UnmarshalJSON(data []byte) error {
	inner := struct {
		Isfamily *bool `json:"Isfamily,omitempty"`
		Isfriend *bool `json:"Isfriend,omitempty"`
		Ispublic *bool `json:"Ispublic,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Photo_visibility{
		Isfamily: inner.Isfamily,
		Isfriend: inner.Isfriend,
		Ispublic: inner.Ispublic,
	}
	return nil
}

// Tag ...
type Tag struct {
	_content    *string `json:"_content,omitempty"`
	Author      *string `json:"author,omitempty"`
	Authorname  *string `json:"authorname,omitempty"`
	ID          *string `json:"id,omitempty"`
	Machine_tag *bool   `json:"machine_tag,omitempty"`
	Raw         *string `json:"raw,omitempty"`
}

func (t *Tag) UnmarshalJSON(data []byte) error {
	inner := struct {
		_content    *string `json:"_content,omitempty"`
		Author      *string `json:"Author,omitempty"`
		Authorname  *string `json:"Authorname,omitempty"`
		ID          *string `json:"ID,omitempty"`
		Machine_tag *bool   `json:"Machine_tag,omitempty"`
		Raw         *string `json:"Raw,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = Tag{
		_content:    inner._content,
		Author:      inner.Author,
		Authorname:  inner.Authorname,
		ID:          inner.ID,
		Machine_tag: inner.Machine_tag,
		Raw:         inner.Raw,
	}
	return nil
}

// URL ...
type URL struct {
	_content *string `json:"_content,omitempty"`
	Type     *string `json:"type,omitempty"`
}

func (t *URL) UnmarshalJSON(data []byte) error {
	inner := struct {
		_content *string `json:"_content,omitempty"`
		Type     *string `json:"Type,omitempty"`
	}{}
	err := json.Unmarshal(data, &inner)
	if err != nil {
		return err
	}

	*t = URL{
		_content: inner._content,
		Type:     inner.Type,
	}
	return nil
}

// GetRestListRequest ...
type GetRestListRequest struct {
	Method           *string
	Text             *string
	Tags             *string
	User_id          *string
	Min_upload_date  *string
	Max_upload_date  *string
	Min_taken_date   *string
	Max_taken_date   *string
	License          *string
	Sort             *string
	Bbox             *string
	Accuracy         *string
	Machine_tags     *string
	Machine_tag_mode *string
	Group_id         *string
	Contacts         *string
	Woe_id           *string
	Place_id         *string
	Media            *string
	Has_geo          *string
	Geo_context      *string
	Lat              *string
	Lon              *string
	Radius_units     *string
	Is_commons       *bool
	In_gallery       *bool
	Is_getty         *bool
}

// *Note validator
func (s *Note) Validate() error {
	return validator.Validate(s)
}

// *Owner validator
func (s *Owner) Validate() error {
	return validator.Validate(s)
}

// *Photo validator
func (s *Photo) Validate() error {
	return validator.Validate(s)
}

// *PhotoResource validator
func (s *PhotoResource) Validate() error {
	return validator.Validate(s)
}

// *Photo_comments validator
func (s *Photo_comments) Validate() error {
	return validator.Validate(s)
}

// *Photo_dates validator
func (s *Photo_dates) Validate() error {
	return validator.Validate(s)
}

// *Photo_description validator
func (s *Photo_description) Validate() error {
	return validator.Validate(s)
}

// *Photo_editability validator
func (s *Photo_editability) Validate() error {
	return validator.Validate(s)
}

// *Photo_notes validator
func (s *Photo_notes) Validate() error {
	return validator.Validate(s)
}

// *Photo_people validator
func (s *Photo_people) Validate() error {
	return validator.Validate(s)
}

// *Photo_permissions validator
func (s *Photo_permissions) Validate() error {
	return validator.Validate(s)
}

// *Photo_publiceditability validator
func (s *Photo_publiceditability) Validate() error {
	return validator.Validate(s)
}

// *Photo_tags validator
func (s *Photo_tags) Validate() error {
	return validator.Validate(s)
}

// *Photo_title validator
func (s *Photo_title) Validate() error {
	return validator.Validate(s)
}

// *Photo_urls validator
func (s *Photo_urls) Validate() error {
	return validator.Validate(s)
}

// *Photo_usage validator
func (s *Photo_usage) Validate() error {
	return validator.Validate(s)
}

// *Photo_visibility validator
func (s *Photo_visibility) Validate() error {
	return validator.Validate(s)
}

// *Tag validator
func (s *Tag) Validate() error {
	return validator.Validate(s)
}

// *URL validator
func (s *URL) Validate() error {
	return validator.Validate(s)
}
