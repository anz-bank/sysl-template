// Code generated by sysl DO NOT EDIT.
package flickr

import (
	"net/http"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/convert"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"
)

// Handler interface for Flickr
type Handler interface {
	GetRestListHandler(w http.ResponseWriter, r *http.Request)
}

// ServiceHandler for Flickr API
type ServiceHandler struct {
	genCallback      core.RestGenCallback
	serviceInterface *ServiceInterface
}

// NewServiceHandler for Flickr
func NewServiceHandler(genCallback core.RestGenCallback, serviceInterface *ServiceInterface) *ServiceHandler {

	return &ServiceHandler{genCallback, serviceInterface}
}

// GetRestListHandler ...
func (s *ServiceHandler) GetRestListHandler(w http.ResponseWriter, r *http.Request) {
	if s.serviceInterface.GetRestList == nil {
		common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError)
		return
	}

	ctx := common.RequestHeaderToContext(r.Context(), r.Header)
	ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), http.StatusOK)
	var req GetRestListRequest

	var MethodParam string

	var TextParam string

	var TagsParam string

	var User_idParam string

	var Min_upload_dateParam string

	var Max_upload_dateParam string

	var Min_taken_dateParam string

	var Max_taken_dateParam string

	var LicenseParam string

	var SortParam string

	var BboxParam string

	var AccuracyParam string

	var Machine_tagsParam string

	var Machine_tag_modeParam string

	var Group_idParam string

	var ContactsParam string

	var Woe_idParam string

	var Place_idParam string

	var MediaParam string

	var Has_geoParam string

	var Geo_contextParam string

	var LatParam string

	var LonParam string

	var Radius_unitsParam string

	var Is_commonsParam string

	var In_galleryParam string

	var Is_gettyParam string

	var convErr error
	MethodParam = restlib.GetQueryParam(r, "method")
	TextParam = restlib.GetQueryParam(r, "text")
	TagsParam = restlib.GetQueryParam(r, "tags")
	User_idParam = restlib.GetQueryParam(r, "user_id")
	Min_upload_dateParam = restlib.GetQueryParam(r, "min_upload_date")
	Max_upload_dateParam = restlib.GetQueryParam(r, "max_upload_date")
	Min_taken_dateParam = restlib.GetQueryParam(r, "min_taken_date")
	Max_taken_dateParam = restlib.GetQueryParam(r, "max_taken_date")
	LicenseParam = restlib.GetQueryParam(r, "license")
	SortParam = restlib.GetQueryParam(r, "sort")
	BboxParam = restlib.GetQueryParam(r, "bbox")
	AccuracyParam = restlib.GetQueryParam(r, "accuracy")
	Machine_tagsParam = restlib.GetQueryParam(r, "machine_tags")
	Machine_tag_modeParam = restlib.GetQueryParam(r, "machine_tag_mode")
	Group_idParam = restlib.GetQueryParam(r, "group_id")
	ContactsParam = restlib.GetQueryParam(r, "contacts")
	Woe_idParam = restlib.GetQueryParam(r, "woe_id")
	Place_idParam = restlib.GetQueryParam(r, "place_id")
	MediaParam = restlib.GetQueryParam(r, "media")
	Has_geoParam = restlib.GetQueryParam(r, "has_geo")
	Geo_contextParam = restlib.GetQueryParam(r, "geo_context")
	LatParam = restlib.GetQueryParam(r, "lat")
	LonParam = restlib.GetQueryParam(r, "lon")
	Radius_unitsParam = restlib.GetQueryParam(r, "radius_units")
	Is_commonsParam = restlib.GetQueryParam(r, "is_commons")
	In_galleryParam = restlib.GetQueryParam(r, "in_gallery")
	Is_gettyParam = restlib.GetQueryParam(r, "is_getty")
	req.Method, convErr = convert.StringToStringPtr(ctx, MethodParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Text, convErr = convert.StringToStringPtr(ctx, TextParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Tags, convErr = convert.StringToStringPtr(ctx, TagsParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.User_id, convErr = convert.StringToStringPtr(ctx, User_idParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Min_upload_date, convErr = convert.StringToStringPtr(ctx, Min_upload_dateParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Max_upload_date, convErr = convert.StringToStringPtr(ctx, Max_upload_dateParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Min_taken_date, convErr = convert.StringToStringPtr(ctx, Min_taken_dateParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Max_taken_date, convErr = convert.StringToStringPtr(ctx, Max_taken_dateParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.License, convErr = convert.StringToStringPtr(ctx, LicenseParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Sort, convErr = convert.StringToStringPtr(ctx, SortParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Bbox, convErr = convert.StringToStringPtr(ctx, BboxParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Accuracy, convErr = convert.StringToStringPtr(ctx, AccuracyParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Machine_tags, convErr = convert.StringToStringPtr(ctx, Machine_tagsParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Machine_tag_mode, convErr = convert.StringToStringPtr(ctx, Machine_tag_modeParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Group_id, convErr = convert.StringToStringPtr(ctx, Group_idParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Contacts, convErr = convert.StringToStringPtr(ctx, ContactsParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Woe_id, convErr = convert.StringToStringPtr(ctx, Woe_idParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Place_id, convErr = convert.StringToStringPtr(ctx, Place_idParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Media, convErr = convert.StringToStringPtr(ctx, MediaParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Has_geo, convErr = convert.StringToStringPtr(ctx, Has_geoParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Geo_context, convErr = convert.StringToStringPtr(ctx, Geo_contextParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Lat, convErr = convert.StringToStringPtr(ctx, LatParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Lon, convErr = convert.StringToStringPtr(ctx, LonParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Radius_units, convErr = convert.StringToStringPtr(ctx, Radius_unitsParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Is_commons, convErr = convert.StringToBoolPtr(ctx, Is_commonsParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.In_gallery, convErr = convert.StringToBoolPtr(ctx, In_galleryParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	req.Is_getty, convErr = convert.StringToBoolPtr(ctx, Is_gettyParam)
	if convErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
		return
	}

	ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
	defer cancel()
	valErr := validator.Validate(&req)
	if valErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError)
		return
	}

	client := GetRestListClient{}

	photoresource, err := s.serviceInterface.GetRestList(ctx, &req, client)
	if err != nil {

		common.HandleError(ctx, w, common.DownstreamUnexpectedResponseError, "Downstream failure", err, s.genCallback.MapError)
		return
	}

	headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
	restlib.SetHeaders(w, headermap)
	restlib.SendHTTPResponse(w, httpstatus, photoresource)
}
