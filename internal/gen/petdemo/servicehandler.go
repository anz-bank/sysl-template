// Code generated by sysl DO NOT EDIT.
package petdemo

import (
	"net/http"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"
	"github.com/anz-bank/sysl-template/internal/gen/flickr"
	"github.com/anz-bank/sysl-template/internal/gen/petstore"
)

// Handler interface for Petdemo
type Handler interface {
	GetRandomPetPicListHandler(w http.ResponseWriter, r *http.Request)
}

// ServiceHandler for Petdemo API
type ServiceHandler struct {
	genCallback      core.RestGenCallback
	serviceInterface *ServiceInterface

	flickrFlickrService     flickr.Service
	petstorePetstoreService petstore.Service
}

// NewServiceHandler for Petdemo
func NewServiceHandler(genCallback core.RestGenCallback, serviceInterface *ServiceInterface, flickrFlickrService flickr.Service, petstorePetstoreService petstore.Service) *ServiceHandler {

	return &ServiceHandler{genCallback, serviceInterface, flickrFlickrService, petstorePetstoreService}
}

// GetRandomPetPicListHandler ...
func (s *ServiceHandler) GetRandomPetPicListHandler(w http.ResponseWriter, r *http.Request) {
	if s.serviceInterface.GetRandomPetPicList == nil {
		common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError)
		return
	}

	ctx := common.RequestHeaderToContext(r.Context(), r.Header)
	ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), http.StatusOK)
	var req GetRandomPetPicListRequest

	ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
	defer cancel()
	valErr := validator.Validate(&req)
	if valErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError)
		return
	}

	client := GetRandomPetPicListClient{
		GetPetList:  s.petstorePetstoreService.GetPetList,
		GetRestList: s.flickrFlickrService.GetRestList,
	}

	petresponse, err := s.serviceInterface.GetRandomPetPicList(ctx, &req, client)
	if err != nil {

		common.HandleError(ctx, w, common.DownstreamUnexpectedResponseError, "Downstream failure", err, s.genCallback.MapError)
		return
	}

	headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
	restlib.SetHeaders(w, headermap)
	restlib.SendHTTPResponse(w, httpstatus, petresponse)
}
